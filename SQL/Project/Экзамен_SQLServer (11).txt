
Задания: 
- Для описанной предметной области создать реляционную БД, которая соотвествует как минимум 3ей нормальной форме.
- При создании таблиц - принять во внимание необходимость обеспечения целостности сущностной и реляционнной целостности.
- Для созданной базы создать требуемые дополнительные объекты (хранимки, функции и пр.).

Рекомендации/требования: 
			-	прежде чем приступать к заданию - продумайте, какие вам понадобяться "вспомогательные" таблицы; 
				проектируемые таблицы должны быть обеспечены ограничениями (по вашему усмотрению); при накладывании ограничений -
				приводите, пожалуйста, причины их применения в комментариях. 
			-	При создании таблиц оставляйте поясняющий комментарий, например: "в этой таблице будем хранить данные по ученикам,
				она будет связываться с таблицей такой-то по полю такому-то, т.к. ..."
			-	При накладывании ограничений приводим пояснение, например: "дата рождения не может быть NULL т.к. ..."
			-	Формат ответа должен описывать выполняемую подзадачу, например: "Создаю таблицу Teachers:",
				"Наполняю таблицу Teachers:"  и т.д. Под описанием задачи приводим скрипт (все как в домашках).
			-	Таблицы наполняем минимальным количеством кортежей для получения информативных выборок, 
				(учеников может быть и 5-10, а вот классов - достаточно и трёх-четырех).
			-	Учитывайте, что небольшое количество информации, которое будет содержаться в бд - не повод писать некорректные, 
				плохочитаемые запросы. Рассчитываем на то, что когда наша база "выйдет на прод" - она будет обслуживать супер-школы с 
				тысячами учеников и десятками классов.
				


Для следующего описания предметной области спроектировать и реализовать реляционную базу данных:

Предметная область:  Школа

- В школе есть ученики, которые учаться в классах, у каждого ученика есть имя, фамилия, 
	дата рождения, дата приема в школу.
- В школе есть персонал: учителя, завучи, разнорабочие и директор.
- Каждый сотрудник имеет имя, фамилию, дату рождения, дату приема на работу, оклад 
	и (если он учитель) категорию.
- Учитель может читать несолько предметов в разных классах.
	Учитель может быть одновременно завучем.
- Класс имеет одного учителя в качестве классного руководителя.
- Клас имеет специализацию.
- директор - это бывший учитель, который имеет оклад, категорию, но не может быть 
	закреплён за классами как руководитель и быть постоянным преподавателем по 
	предметам которые он, как учитель, знает.
- разнорабочие не могут преподавать предметы и быть классными руководителями.
- Ученикам читаются предметы, предмет может читаться несколькими учителями.
- Ученики учаться в классах, у каждого класса своя специализация (математика/биология/языки и пр.),
	имя, классный руководитель.
- Ученики получают по предметам оценки (упрощение: по одному предмету у ученика может быть (или не быть)
	только одна оценка).
- Специализации классов описывается кратким названием и развернутым пояснением.
- Оклады учителей (по соображениям безопасности директора) - содержатся в отдельной таблице.

Для спроектированной базы данных реализовать следующие объекты и привести примеры их вызова:
- Вьюшка, которая выводит имя и оклад сотрудника.
- Вьюшка, которая показывает количество учеников по специализациям.
- Хранимую процедуру для назначения учителя директором.
- Триггер, который недопускает назначение нового преаодавателя без указания 
	его акредитации (вместо этого выводим на сообщение с предупреждением).
- Триггер, который при добавлении ученика создает запись в таблице "Новенькие", в которой 
	указывает имя, фамилию, класс и дату приема.
- Хранимую процедуру, которая очищает таблицу с "Новенькими", если новенькие больше 3х месяцев в школе.

