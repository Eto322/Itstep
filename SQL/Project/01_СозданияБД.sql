-- перед роботой хотел бы укзать , что я пытался не пользлваться нуллами если я не могу это как-то обойти(пример таблица  CLASS)
--у меня была такая логика что в зависимости от того на каком языке и как написан бекенд у нас может случиться проблема что на бек может
--прийти нулл там где его не ожидали ,и в итоге мы можем столкнуться с серьезними проблемами при роботе ,
-- тут есть два варианта или переписивать или вводить изменения в бекенд  ( что может повлиять за собой изменения всей логики программы--хотя я может и преувеличиваю ) 
-- или просто при дизайне бд не использовать НУЛЛ
-- Для демонстрации работы с нулами я использовал таблицу (Mark-тут лучше  или Specialization-- тут постольку по сколько ) где привел обоснования почему я считаю что там их надо использовать.
------------------------------------------------------------------------------Создания БД--------------------------------------------------------------------------------------------------------------------

CREATE TABLE Salary--таблица для зарпалаты, храним ИД зарплаты и саму сумму зарплаты.
--каждое значения не может быть НУЛЛ
(
	SalaryID INT NOT NULL IDENTITY(1,1) PRIMARY KEY, 
	[Value] INT NOT NULL

)

CREATE TABLE StaffPosition-- здесь мы храним Позиции наших роботников (зауч,директор  много робочий, учитель) 
--каждое значения не может быть НУЛЛ
( 
	PositionID INT NOT NULL IDENTITY(1,1)  PRIMARY KEY, 
	[Name] NVARCHAR(100) NOT NULL
)

CREATE TABLE Staff-- храним информацию о роботнике 
-- Salary уникальная поскольку я решил что для каждого работника должна быть своя ИД зарплаты,(уже не уникальная, потомучто она мешает роботе моего триггера для смены директора, и я витоге не могу нормально 
--поменять зарплату)
--каждое значения не может быть НУЛЛ
(
	StaffID INT NOT NULL IDENTITY(1,1) PRIMARY KEY, 
	SalaryID INT NOT NULL  FOREIGN KEY REFERENCES Salary(SalaryID), 
	PositionID INT  NOT NULL  FOREIGN KEY REFERENCES StaffPosition(PositionID), --ключ чтоб получить позицию
	FirstName NVARCHAR(100) NOT NULL, 
	SecondName NVARCHAR(100) NOT NULL, 
	BirthDate DATE NOT NULL, 
	StartWorkDate DATE NOT NULL

)
-- храним категории учителей
--каждое значения не может быть НУЛЛ
CREATE TABLE Category
(
	CategoryID INT NOT NULL IDENTITY(1,1) PRIMARY KEY , 
	[Name] NVARCHAR(100) NOT NULL UNIQUE--уникальная поскольку у нас только несколько категорий , и они не должны повторяться

)



-- таблица для учителей , состоит только из ключей, поскольку категория , вынесена в отдельную таблицу , имя, фамилия и.тд уже хранятася в таблице staff и здесь их хранить тоже не имеет смысла
-- поскольку они не имеют ни какого отношению к учиелю, учитель и какой он предмет он ведет тоже вынесены в отельную таблицу поскольку один учитель может вестни несколько предметов и наоборот , и соотвественно 
-- записивать их сюда было б нарушениям 3 норм формы, поскольку у нас бы дуюлировались записми учителей для каждого предмета

--каждое значения не может быть НУЛЛ
CREATE TABLE Teacher
(	TeacherID INT NOT NULL  IDENTITY(1,1) PRIMARY KEY ,
	StaffID INT NOT NULL UNIQUE FOREIGN KEY REFERENCES Staff(StaffID), --ключ для получения сведения о учители ( в таблице Staff)
	CategoryID INT NOT NULL  FOREIGN KEY REFERENCES Category(CategoryID) -- ключ для получения категории нашего учителя
)




--таблица для хранения прдемета который преподает преподаватель
--каждое значения не может быть НУЛЛ
CREATE TABLE [Subject]
(
	SubjectID INT NOT NULL IDENTITY(1,1) PRIMARY KEY , 
	[Name] NVARCHAR(100) NOT NULL UNIQUE,--Уникальный поскольку предметы не могут повторяться
)

--составная таблица, для получения предмета-учителя, надобность описал при создании таблици учителя. 
--каждое значения не может быть НУЛЛ
CREATE TABLE TeacherSubject
( 
	TeacherID INT NOT NULL  FOREIGN KEY REFERENCES Teacher(TeacherID),
	SubjectID INT NOT NULL  FOREIGN KEY REFERENCES [Subject](SubjectID),--ключ для предмета учителя
	
	
)

-- таблица со спецеализациями, короткое описания нулом быть не может , полное может , проблему с нуллом в полным можно было б решить с помощью пустой строки
-- исходя из моей логики пустая строка которая приходит на бек хуже чем нулл , поскольку при нуле он может сразу крашнуться , при пустой строке продолжить роботу,что как я подумал может обернуться проблемой 
-- в будущем
-- хотя я считаю что тут использования нулла или пустой строки не приципиально.Можно было б даже застваить всегда писать полное описания , но в этом может и не быть смыслаэ

--каждое значения кроме FullDescription  не может быть НУЛЛ
CREATE TABLE Specialization
( 
	SpecializationID INT NOT NULL IDENTITY(1,1) PRIMARY KEY , 
	[Description]  NVARCHAR(50)  NOT NULL  UNIQUE, 
	FullDescription NVARCHAR(MAX) NULL -- может быть нулом
)

-- Таблица класса, имеет номер и букву которые ограничине, также имеет SpecializationID для того чтоб определить спецеализацию класса 
-- У меня была логика , что если у всех классов должна быть спецеализация, и поэтому SpecializationID не может быть нулом, при другой логике , его можно сделать нуллом или добавить в таблицу ид спецеализаций 
-- поле которе будет писать что спецеализации нет (так и сделал, проблему с нулл значениями описал в начале роботы)
--каждое значения не может быть НУЛЛ
CREATE TABLE CLASS
(	
	ClassID INT NOT NULL IDENTITY(1,1) PRIMARY KEY , 
	SpecializationID INT NOT NULL FOREIGN KEY REFERENCES Specialization(SpecializationID), 
	ClassNumber INT NOT NULL,-- Номер класса может находиться в пределах от 1 до 11 
	ClasLetter NVARCHAR(1) NOT NULL, -- буква класса , только буква англ алфавита А-Z
	CHECK(ClassNumber BETWEEN 1 and 11   AND ClasLetter NOT LIKE '%[^A-Z]%')
)

-- таблица для студентов , имеет внешний ключ ClassID для доступа к классу студента
--каждое значения не может быть НУЛЛ
CREATE TABLE Student
(
	StudentID INT NOT NULL IDENTITY(1,1) PRIMARY KEY, 
	ClassID INT NOT NULL FOREIGN KEY REFERENCES Class(ClassID) , --ключ для доступа к студентам 
	FirstName NVARCHAR(100) NOT NULL, 
	SecondName NVARCHAR(100) NOT NULL, 
	BirthDate DATE NOT NULL, 
	StartDate DATE NOT NULL 


)

-- в таблице храниться информации о учитель-класс в которм он класный руководитель
-- сделал такую таблицу , поскольку в задание говориться что у класса один класный руководитель, а сколько у учителя может быть классов где он классный руководитель не указано
-- у меня в школе было что у  учителя могло быть несколько классов, поэтому я придерживался такой логике
--каждое значения не может быть НУЛЛ
CREATE TABLE ClassroomTeacher
(
	TeacherID INT NOT NULL FOREIGN KEY REFERENCES Teacher(TeacherID),--доступ к учителю
	ClassID INT NOT NULL FOREIGN KEY REFERENCES Class(ClassID) --ид класса где учитель руководитель
)

-- таблица в которой мы храним оценки
-- сама Мark может быть нулом ,поскольку у меня была логика , что в школе может проводиться условный директорский контроль , где все должны получить оценку, но студент не появился на нем.
-- Суть лежит в том что директору надо узнать средний бал по контролю , но если мы студенту за отсутсвия бы ставили 0 или 1 , то это бы влияло на средний бал при подсчете , хотя студент не писал саму роботу
-- поэтому если такой случай будет , мы можем легко поставить ему нулл что значит оценки нету.

--каждое значения кроме Mark не может быть НУЛЛ
CREATE TABLE Mark
(	
	MarkID INT NOT NULL IDENTITY(1,1) PRIMARY KEY, 
	MarkDate DATE NOT NULL,
	[Value] INT NULL
	CHECK([VALUE] BETWEEN 1 AND 12)-- Поверяем что оценка в пределах от 1 до 12 
	
)





--таблица в которай мы храним ИД студента который получил оценку , ИД предмета по которм он получил оценку , ИД самой оценки 
-- сделал в таком виде , поскольку руководствовался логикой что у нас может быть так что студент получит две или больше одинаковых оценок на одном занятии , и тогда мы можем получить то что у нас
--будет подряд идти несколько одинаковых записей.Что по сути правильно но выглядит не разборчливо , с помощью такой таблици мы отслеживаем ИД самой оценки и поэтому можем проследить что на самом деле
-- запись была уникальной

-- Я подумывал прям в эту табличку добавить нашу оценку , но пришел к выводу что это будет не удобно при роботе.Допустим мы хотим посчитать среднее значения всех оценок за определеный срок, 
--мы конечно сможем написать этот запрос , но по мне зачем нам думать о том что в таблички есть лишняя информация , если мы можем обратиться к другой табличке в которой ее соотвсественно нет

-- возможно такое мышления , может аукнуться определеными проблема где нам надо будет джойнить эту табличуку к табличке Мark чтоб допустим получить все оценки для одного студента , поскольку 
--в таблице Mark этой информации нет.
-- я в итоге сошелся на таком варианте

--каждое значения не может быть НУЛЛ
CREATE TABLE MarkSubjectStudent
(
	StudentID INT NOT NULL FOREIGN KEY REFERENCES Student(StudentID), 
	SubjectID INT NOT NULL FOREIGN KEY REFERENCES [Subject](SubjectID), 
	MarkID INT NOT NULL FOREIGN KEY REFERENCES Mark(MarkID), 
	 
)

--таблица для хранения новых студентов
CREATE TABLE NewStudent
( 
	
	StudentID INT NOT NULL FOREIGN KEY REFERENCES Student(StudentID),
	ClassID INT NOT NULL FOREIGN KEY REFERENCES Class(ClassID) , --ключ для доступа к студентам 
	FirstName NVARCHAR(100) NOT NULL, 
	SecondName NVARCHAR(100) NOT NULL, 
	BirthDate DATE NOT NULL, 
	StartDate DATE NOT NULL 

)
